---

- name: "Check if monitor_etcd path exists"
  stat:
    path: "/etc/systemd/system/monitor_etcd.service"
  register: result
  
- name: reset | stop services
  service:
    name: "{{ item }}"
    state: stopped
  with_items:
    - monitor_etcd.service
  when:
    - isdualnodesetup|bool    
    - result.stat.exists
    
#yes
- name: /data /cache cleanup
  file:
     state: absent
     path: /{{ item }}
  with_items:
      - "data/ddnmon"
      - "cache/influxdb"
      - "var/lib/grafana"
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input == 'yes'
  tags: cleanup
    #no
- name: copy ddnmonkey
  shell: cp /etc/ddnmon/local/conf/ddnmon.key /tmp/
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input != 'yes'
    - inventory_hostname == groups['etcd'][0]
  tags: cleanup
    #always
- name: Removing /opt/ddnmon /etc/ddnmon /mnt/ddn-copy-files
  file:
     path: "{{ item }}"
     state: absent
  with_items:
      - "/opt/ddnmon"
      - "/etc/ddnmon"
      - "/mnt/ddn-copy-files"
  tags: cleanup
    #no
- name: Check if ddnmonkey exist at backup location
  stat:
    path: /tmp/ddnmon.key
  register: is_ddnmonkey
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input != 'yes'
    - inventory_hostname == groups['etcd'][0]
  tags: cleanup

- debug:
    msg: "{{ is_ddnmonkey }}"
  tags: cleanup
- set_fact:
     ddnmonkey_present: "{{ is_ddnmonkey.stat.exists }}"
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input != 'yes'
    - inventory_hostname == groups['etcd'][0]
  tags: cleanup
    #no
- name: create path for ddnmonkey if /data /cache persists
  file:
     path: "/etc/ddnmon/local/conf"
     state: directory
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input != 'yes'
    - hostvars[groups['etcd'][0]].ddnmonkey_present
  tags: cleanup
    #no
- name: place ddnmonkey to conf path
  shell: cp /tmp/ddnmon.key /etc/ddnmon/local/conf/
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input != 'yes'
    - inventory_hostname == groups['etcd'][0]
    - hostvars[groups['etcd'][0]].ddnmonkey_present
  tags: cleanup
    #no
- name: copy file to second node buffer
  fetch:
     src: /etc/ddnmon/local/conf/ddnmon.key
     dest: buffer/
     flat: yes
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input != 'yes'
    - hostvars[groups['etcd'][0]].ddnmonkey_present
    - inventory_hostname == groups['etcd'][0]
  tags: cleanup


- name: copy file from first node
  copy:
     src: buffer/ddnmon.key
     dest: /etc/ddnmon/local/conf/
  when:
    - hostvars[groups['etcd'][0]].data_cache_cleanup.user_input != 'yes'
    - hostvars[groups['etcd'][0]].ddnmonkey_present
    - inventory_hostname != groups['etcd'][0]
  tags: cleanup

- name: delete the etcd service files
  file:
     state: absent
     path: /{{ item }}
  with_items:
      - "etc/systemd/system/etcd.service"
      - "etc/systemd/system/monitor_etcd.service"
  tags: cleanup    
  when:
    - isdualnodesetup|bool  